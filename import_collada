#!/bin/bash
#+
# This script invokes Blender to import a Collada document into a
# new .blend file. Invoke it as follows:
#
#     import_collada [«options»...] «input_collada_file» «output_blend_file»
#
# where «input_collada_file» is the name of the file to import, and
# «output_blend_file» is the name to give the output .blend file.
#
# Valid options are
#    --blender=«blender»
#          specifies the path to the Blender executable. Defaults to
#          searching for the name “blender” in your PATH.
#    --existing=error|overwrite
#          specifies what to do if the output .blend file already exists:
#            error       -- signal an error and abort the conversion (default)
#            overwrite   -- overwrite the output .blend file
#    --scale=«scalefactor»
#          specifies an optional factor by which to scale the imported
#          model.
#    --template=«template-name»
#          specifies the startup template to load before doing the import.
#
# External program needed: unzip.
#
# Copyright 2018 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

opterror()
  {
    echo "$0: $1" 1>&2
    exit 3
  } # opterror

blender=blender
existing=error
scale=
template=

for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    if [ "$1" == "--" ]; then
        shift
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "blender" ]; then
        blender="$val"
    elif [ "$opt" = "existing" ]; then
        if [ "$val" != "error" -a "$val" != "overwrite" ]; then
            opterror "--existing value must be “error” or “overwrite”"
        fi
        existing="$val"
    elif [ "$opt" = "scale" ]; then
        scale="$val"
    elif [ "$opt" = "template" ]; then
        template="$val"
    else
        opterror "bad option $opt"
    fi
done
if [ -z "$(type -p "$blender")" ]; then
    opterror "no such executable “$blender”"
fi
if [ $# != 2 ]; then
    opterror $'Usage:\n\t'"$0 "'«input_collada_file» «output_blend_file»'
fi

# pass parameters to Python script in environment variables to avoid
# problems with special characters
export IMPORT_infile="$1"
export IMPORT_outfile="$2"
export IMPORT_existing="$existing"
export IMPORT_scale="$scale"
export IMPORT_template="$template"

exec "$blender" -noaudio -b -P <(cat <<'EOD'
import sys
import os
import subprocess
import shutil
import tempfile
import getopt
import bpy

try :
    os.wait() # gobble zombie child of shell which was previously in this process slot
except ChildProcessError :
    # can happen intermittently?
    pass
#end try

#+
# Mainline
#-

infile = os.getenv("IMPORT_infile")
outfile = os.getenv("IMPORT_outfile")
existing_action = os.getenv("IMPORT_existing")
scale_factor = os.getenv("IMPORT_scale", "")
if scale_factor != "" :
    try :
        scale_factor = float(scale_factor)
        if scale_factor <= 0.0 :
            raise ValueError
        #end if
    except ValueError :
        scale_factor = None
    #end try
    if scale_factor == None :
        raise getopt.GetoptError("bad --scale factor")
    #end if
else :
    scale_factor = None
#end if
template = os.getenv("IMPORT_template", "")
if template != "" :
    valid_templates = set()
    for dir in bpy.utils.app_template_paths() :
        valid_templates |= set(os.listdir(dir))
    #end for
    if template not in valid_templates :
        raise getopt.GetoptError \
          (
                "invalid template %s not found among those currently installed: %s"
            %
                (repr(template), repr(sorted(valid_templates)))
          )
    #end if
#end if
if not outfile.endswith(".blend") :
    raise getopt.GetoptError("output file name must end with .blend")
#end if
if existing_action != "overwrite" and os.path.exists(outfile) :
    raise getopt.GetoptError("output %s already exists" % repr(outfile))
#end if

tmpdir = None

if infile.endswith(".zip") :
    tmpdir = tempfile.mkdtemp(prefix = "blenddae")
    subprocess.check_call(args = ("unzip", infile, "-d", tmpdir))
    modelsdir = os.path.join(tmpdir, "models")
    if not os.path.isdir(modelsdir) :
        modelsdir = tmpdir
    #end if
    use_infile = None
    for item in os.listdir(modelsdir) :
        if item.endswith(".dae") :
            modelfile = os.path.join(modelsdir, item)
            if os.path.isfile(modelfile) :
                if use_infile != None :
                    raise RuntimeError("multiple .dae files present in %s" % infile)
                #end if
                use_infile = modelfile
            #end if
        #end if
    #end for
    if use_infile == None :
        raise RuntimeError("no .dae file found in in %s" % infile)
    #end if
elif infile.endswith(".dae") :
    use_infile = infile
else :
    raise getopt.GetoptError("input filename must end with .dae or .zip")
#end if

bpy.ops.wm.read_homefile(app_template = template)
objs = list(obj for obj in bpy.data.objects if obj.type != "CAMERA")
for obj in objs :
    bpy.data.objects.remove(obj)
#end for
bpy.ops.wm.collada_import(filepath = use_infile)
if scale_factor != None :
    bpy.ops.transform.resize(value = (scale_factor, scale_factor, scale_factor))
#end if
for image in bpy.data.images :
    image.pack()
#end for
bpy.ops.wm.save_as_mainfile(filepath = outfile)
if tmpdir != None :
    shutil.rmtree(tmpdir)
#end if

EOD
)
