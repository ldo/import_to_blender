#!/bin/bash
#+
# This script invokes Blender to import a 3D model in a supported
# format into a new .blend file. Invoke it as follows:
#
#     import_to_blender [«options»...] «input_file» «output_blend_file»
#
# where «input_file» is the name of the file to import, and
# «output_blend_file» is the name to give the output .blend file.
#
# Valid options are
#    --arg=«keyword»=«value»
#          specifies an additional keyword argument for the import operator.
#          May be specified multiple times with different keywords.
#    --blender=«blender»
#          specifies the path to the Blender executable. Defaults to
#          searching for the name “blender” in your PATH.
#    --existing=error|merge|overwrite
#          specifies what to do if the output .blend file already exists:
#            error       -- signal an error and abort the conversion (default)
#            merge       -- merge the imported model into the existing file
#            overwrite   -- overwrite the output .blend file
#    --merge-multi
#          specifies that, if multiple importable files are found in an
#          archive, then they are all to be imported into a single .blend
#          file. Otherwise, if multiple importable files are found, this is
#          an error. In any case, the files must all have the same extension,
#          so they can be handled by the same importer.
#    --quiet
#          Reduce messages displayed.
#    --postexec=script
#          executes the specified Python code after the import, just prior
#          to saving the .blend file.
#          May be specified multiple times; the values are concatenated
#          in sequence, separated by newlines.
#    --preexec=script
#          executes the specified Python code prior to the import.
#          May be specified multiple times; the values are concatenated
#          in sequence, separated by newlines.
#    --scale=«scalefactor»
#          specifies an optional factor by which to scale the imported
#          model.
#    --template=«template-name»
#          specifies the startup template to load before doing the import.
#    --test
#          indicates just to test the input file for importability,
#          without doing the actual import. Returns a status of 0 if it
#          looks importable, 1 if not, or 2 if multiple importable files
#          were found but --merge-multi was not specified.
#
# External program needed: unar.
#
# Copyright 2018-2019 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

opterror()
  {
    echo "$0: $1" 1>&2
    exit 3
  } # opterror

blender=blender
existing=error
merge_multi=0
just_test=0
nr_args=0
args=
quiet=0
scale=
template=
postexec=
preexec=

for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    if [ "$1" == "--" ]; then
        shift
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "arg" ]; then
        nr_args=$((nr_args + 1))
        export IMPORT_arg_${nr_args}="$val"
    elif [ "$opt" = "blender" ]; then
        blender="$val"
    elif [ "$opt" = "existing" ]; then
        if [ "$val" != "error" -a "$val" != "merge" -a "$val" != "overwrite" ]; then
            opterror "--existing value must be “error”, “merge” or “overwrite”"
        fi
        existing="$val"
    elif [ "$opt" = "merge-multi" ]; then
        merge_multi=1
    elif [ "$opt" = "quiet" ]; then
        quiet=1
    elif [ "$opt" = "postexec" ]; then
        if [ -n "$postexec" ]; then
            postexec="$postexec"$'\n'"$val"
        else
            postexec="$val"
        fi
    elif [ "$opt" = "preexec" ]; then
        if [ -n "$preexec" ]; then
            preexec="$preexec"$'\n'"$val"
        else
            preexec="$val"
        fi
    elif [ "$opt" = "scale" ]; then
        scale="$val"
    elif [ "$opt" = "template" ]; then
        template="$val"
    elif [ "$opt" = "test" ]; then
        just_test=1
    else
        opterror "bad option $opt"
    fi
done
if [ -z "$(type -p "$blender")" ]; then
    opterror "no such executable “$blender”"
fi
if [ $just_test = 0 -a $# != 2 ]; then
    opterror $'Usage:\n\t'"$0 "'«input_to_blender» «output_blend_file»'
fi

# pass parameters to Python script in environment variables to avoid
# problems with special characters
export IMPORT_infile="$1"
export IMPORT_outfile="$2"
export IMPORT_existing="$existing"
export IMPORT_merge_multi="$merge_multi"
export IMPORT_quiet="$quiet"
export IMPORT_just_test="$just_test"
if [ $nr_args -ne 0 ]; then
    unset IMPORT_arg_$((nr_args + 1)) # just in case
fi
export IMPORT_scale="$scale"
export IMPORT_template="$template"
export IMPORT_postexec="$postexec"
export IMPORT_preexec="$preexec"

exec "$blender" -noaudio -b -P <(cat <<'EOD'
import sys
import os
import subprocess
import shutil
import tempfile
import getopt
import bpy

try :
    os.wait() # gobble zombie child of shell which was previously in this process slot
except ChildProcessError :
    # can happen intermittently?
    pass
#end try

#+
# Importer arg validation/conversion
#-

def valid_axis(arg) :
    if arg not in {"X", "Y", "Z", "-X", "-Y", "-Z"} :
        raise TypeError("not a valid axis: %s" % repr(arg))
    #end if
    return \
        arg
#end valid_axis

def limit_int(minval, maxval) :

    maxval_str = (lambda : "∞", lambda : "%d" % maxval)[maxval != None]()

    def validate(arg) :
        arg = int(arg)
        if arg < minval or maxval != None and arg > maxval :
            raise TypeError("arg %d out of range [%d, %s]" % (arg, minval, maxval_str))
        #end if
        return \
            arg
    #end validate

#begin limit_int
    validate.__name__ = "limit_int(%d, %s)" % (minval, maxval_str)
    return \
        validate
#end limit_int

def limit_float(minval, maxval) :

    def validate(arg) :
        arg = float(arg)
        if arg < minval or arg > maxval :
            raise TypeError("arg %.3g out of range [%.3g, %.3g]" % (arg, minval, maxval))
        #end if
        return \
            arg
    #end validate

#begin limit_float
    validate.__name__ = "limit_float(%.3g, %.3g)" % (minval, maxval)
    return \
        validate
#end limit_float

def limit_enum(vals) :

    def validate(arg) :
        if arg not in vals :
            raise TypeError("value %s not in %s" % (repr(arg), repr(sorted(vals))))
        #end if
        return \
            arg
    #end validate

#begin limit_enum
    validate.__name__ = "limit_enum(%s)" % repr(sorted(vals))
    return \
        validate
#end limit_enum

#+
# Importer definitions
#
# Dictionary key is filename extension
# Value is dictionary with entries
#    name -- descriptive name
#    op   -- either Blender operator to perform import (if enabled as standard)
#            or tuple («base operator module», «name path», «addon module name»)
#            giving name of addon module to enable and then path to retrieve operator
#            starting from given base module.
#    args -- additional optional args to import operator, list of (name, type) tuples.
#-

importers = \
    {
        ".3ds" :
            {
                "name" : "3DS",
                "op" : bpy.ops.import_scene.autodesk_3ds,
                "args" :
                    [
                        ("axis_forward", valid_axis),
                        ("axis_up", valid_axis),
                        ("constrain_size", limit_float(0, 1000)),
                        ("use_image_search", bool),
                        ("use_apply_transform", bool),
                    ],
            },
        ".abc" :
            {
                "name" : "Alembic",
                "op" : bpy.ops.wm.alembic_import,
                "args" :
                    [
                        ("scale", limit_float(0.0001, 1000)),
                        ("set_frame_range", bool),
                        ("validate_meshes", bool),
                        ("is_sequence", bool),
                    ],
            },
        ".dae" :
            {
                "name" : "Collada",
                "op" : bpy.ops.wm.collada_import,
                "args" :
                    [
                        ("import_units", bool),
                        ("fix_orientation", bool),
                        ("find_chains", bool),
                        ("auto_connect", bool),
                        ("min_chain_length", limit_int(0, None)),
                        ("keep_bind_info", bool),
                    ],
            },
        ".fbx" :
            {
                "name" : "FBX",
                "op" : bpy.ops.import_scene.fbx,
                "args" :
                    [
                        ("axis_forward", valid_axis),
                        ("axis_up", valid_axis),
                        ("directory", str),
                        ("use_manual_orientation", bool),
                        ("global_scale", limit_float(0.001, 1000)),
                        ("bake_space_transform", bool),
                        ("use_custom_normals", bool),
                        ("use_image_search", bool),
                        ("use_alpha_decals", bool),
                        ("decal_offset", limit_float(0, 1)),
                        ("use_anim", bool),
                        ("anim_offset", float),
                        ("use_custom_props", bool),
                        ("use_custom_props_enum_as_string", bool),
                        ("ignore_leaf_bones", bool),
                        ("force_connect_children", bool),
                        ("automatic_bone_orientation", bool),
                        ("primary_bone_axis", valid_axis),
                        ("secondary_bone_axis", valid_axis),
                        ("use_prepost_rot", bool),
                    ],
            },
        ".lwo" :
            {
                "name" : "LightWave Objects",
                "op" : (bpy.ops.import_scene, ("lwo",), "io_import_scene_lwo"),
                "args" :
                    [
                        ("ADD_SUBD_MOD", bool),
                        ("LOAD_HIDDEN", bool),
                        ("SKEL_TO_ARM", bool),
                        ("USE_EXISTING_MATERIALS", bool),
                    ],
            },
        ".obj" :
            {
                "name" : "OBJ",
                "op" : bpy.ops.import_scene.obj,
                "args" :
                    [
                        ("axis_forward", valid_axis),
                        ("axis_up", valid_axis),
                        ("use_edges", bool),
                        ("use_smooth_groups", bool),
                        ("use_split_objects", bool),
                        ("use_split_groups", bool),
                        ("use_groups_as_vgroups", bool),
                        ("use_image_search", bool),
                        ("split_mode", limit_enum({"OFF", "ON"})),
                        ("global_clamp_size", limit_float(0, 1000)),
                    ],
            },
        ".ply" :
            {
                "name" : "PLY",
                "op" : bpy.ops.import_mesh.ply,
                "args" :
                    [
                        ("directory", str),
                        # ("files", ?),
                    ],
            },
        ".stl" :
            {
                "name" : "STL",
                "op" : bpy.ops.import_mesh.stl,
                "args" :
                    [
                        ("axis_forward", valid_axis),
                        ("axis_up", valid_axis),
                        # ("files", ?),
                        ("directory", str),
                        ("global_scale", limit_float(1e-6, 1e6)),
                        ("use_scene_unit", bool),
                        ("use_facet_normal", bool),
                    ],
            },
        ".x3d" :
            {
                "name" : "X3D",
                "op" : bpy.ops.import_scene.x3d,
                "args" :
                    [
                        ("axis_forward", valid_axis),
                        ("axis_up", valid_axis),
                    ],
            },
        ".xps" :
            {
                "name" : "XNALara Objects",
                "op" : (bpy.ops, ("xps_tools", "import_model"), "XNALaraMesh"),
                  # get importer addon from <https://github.com/johnzero7/XNALaraMesh/>
                "args" :
                    [
                        ("uvDisplX", int),
                        ("uvDisplY", int),
                        ("impDefPose", bool),
                        ("markSeams", bool),
                        ("colorizeMesh", bool),
                        ("vColors", bool),
                        ("joinMeshRips", bool),
                        ("joinMeshParts", bool),
                        ("connectBones", bool),
                        ("autoIk", bool),
                        ("importNormals", bool),
                    ],
            },
    }

#+
# File manipulations
#-

getext = lambda item : os.path.splitext(item)[1].lower()
is_archive_ext = \
  (
    lambda item :
            getext(item)
        in
            (
                ".zip", ".7z", ".rar", ".tar", ".tar.gz", ".tar.bz2", ".tar.xz",
                ".tgz", ".tbz2", ".xz",
            )
  )

def extract_archive(infile, outdir) :
    importable = []

    def do_extract(infile, outdir) :

        def scan_dir(outdir) :
            for item in os.listdir(outdir) :
                item = os.path.join(outdir, item)
                if os.path.isfile(item) :
                    if is_archive_ext(item) :
                        subdir = os.path.join(outdir, os.path.splitext(item)[0])
                        os.mkdir(subdir)
                        do_extract(item, subdir)
                        os.unlink(item)
                    elif getext(item) in importers :
                        importable.append(item)
                    #end if
                elif os.path.isdir(item) :
                    scan_dir(item)
                #end if
            #end for
        #end scan_dir

    #begin do_extract
        if quiet :
            extra_opts = ("-q",)
        else :
            extra_opts = ()
        #end if
        subprocess.check_call(args = ("unar",) + extra_opts + ("-D", infile, "-o", outdir))
        scan_dir(outdir)
    #end do_extract

#begin extract_archive
    do_extract(infile, outdir)
    return \
        importable
#end extract_archive

#+
# Mainline
#-

infile = os.getenv("IMPORT_infile")
outfile = os.getenv("IMPORT_outfile")
existing_action = os.getenv("IMPORT_existing")
merge_multi = os.getenv("IMPORT_merge_multi", "0")  != "0"
quiet = os.getenv("IMPORT_quiet", "0")  != "0"
just_test = os.getenv("IMPORT_just_test", "0")  != "0"
scale_factor = os.getenv("IMPORT_scale", "")
importer_args_strs = []
i = 0
while True :
    i += 1
    arg = os.getenv("IMPORT_arg_%d" % i)
    if arg == None :
        break
    importer_args_strs.append(arg)
#end while

postexec = os.getenv("IMPORT_postexec", "")
preexec = os.getenv("IMPORT_preexec", "")
if scale_factor != "" :
    try :
        scale_factor = float(scale_factor)
        if scale_factor <= 0.0 :
            raise ValueError
        #end if
    except ValueError :
        scale_factor = None
    #end try
    if scale_factor == None :
        raise getopt.GetoptError("bad --scale factor")
    #end if
else :
    scale_factor = None
#end if
template = os.getenv("IMPORT_template", "")
if template != "" :
    valid_templates = set()
    for dir in bpy.utils.app_template_paths() :
        valid_templates |= set(os.listdir(dir))
    #end for
    if template not in valid_templates :
        raise getopt.GetoptError \
          (
                "invalid template %s not found among those currently installed: %s"
            %
                (repr(template), repr(sorted(valid_templates)))
          )
    #end if
#end if

if not just_test :
    if os.path.isdir(outfile) :
        outfile = os.path.join(outfile, os.path.splitext(os.path.split(infile)[1])[0] + ".blend")
    elif not outfile.endswith(".blend") :
        raise getopt.GetoptError("output file name must end with .blend")
    #end if
    if existing_action == "error" and os.path.exists(outfile) :
        raise getopt.GetoptError("output %s already exists" % repr(outfile))
    #end if
#end if

tmpdir = None

if just_test :
    is_importable_status = 0 # to begin with
#end if
if is_archive_ext(infile) :
    tmpdir = tempfile.mkdtemp(prefix = "blender_import_")
    importable = extract_archive(infile, tmpdir)
    if len(importable) == 1 :
        use_infile = importable[0]
        importer = importers[getext(use_infile)]
    elif len(importable) > 1 :
        if merge_multi :
            importer = importers[getext(importable[0])]
            if any(importers[getext(i)] != importer for i in importable[1:]) :
                raise RuntimeError \
                  (
                        "multiple importable files with different extensions present in %s: %s"
                    %
                        (repr(infile), repr(importable))
                  )
            #end if
        else :
            if just_test :
                is_importable_status = 2
            else :
                raise RuntimeError \
                  (
                        "multiple importable files present in %s: %s"
                    %
                        (repr(infile), repr(importable))
                  )
            #end if
        #end if
    else :
        if just_test :
            is_importable_status = 1
        else :
            raise RuntimeError("no importable file found in in %s" % repr(infile))
        #end if
    #end if
else :
    infilext = getext(infile)
    if infilext in importers :
        importer = importers[infilext]
        importable = (infile,)
    else :
        if just_test :
            is_importable_status = 1
        else :
            raise getopt.GetoptError("input filename %s extension is not recognized" % infile)
        #end if
    #end if
#end if

if not just_test :
    importer_arg_defs = dict((item[0], item[1]) for item in importer["args"])
    importer_args = {}
    for arg in importer_args_strs :
        value = arg.split("=", 1)
        if len(value) != 2 :
            raise getopt.GetoptError("bad import arg %s" % repr(arg))
        #end if
        keyword, value = value
        if keyword not in importer_arg_defs :
            raise getopt.GetoptError \
              (
                    "unrecognized arg keyword %s for %s importer"
                %
                    (repr(keyword), importer["name"])
              )
        #end if
        if keyword in importer_args :
            raise getopt.GetoptError("duplicate arg keyword %s" % repr(keyword))
        #end if
        conv = importer_arg_defs[keyword]
        fail = None
        try :
            importer_args[keyword] = conv(value)
        except (TypeError, ValueError) as why :
            fail = getopt.GetoptError \
              (
                "value for %s arg not of type %s -- %s" % (keyword, conv.__name__, str(why))
              )
        #end try
        if fail != None :
            raise fail
        #end if
    #end for

    if existing_action == "merge" and os.path.exists(outfile) :
        bpy.ops.wm.open_mainfile(filepath = outfile)
    else :
        bpy.ops.wm.read_homefile(app_template = template)
    #end if
    objs = list(obj for obj in bpy.data.objects if obj.type != "CAMERA")
    if existing_action != "merge" :
        for obj in objs :
            bpy.data.objects.remove(obj)
        #end for
    #end for
    if preexec != "" :
        exec(preexec)
    #end if
    importer_op = importer["op"]
    if isinstance(importer_op, tuple) :
        sys.stderr.write("enable importer module %s for operator : %s\n" % (importer_op[2], repr(importer_op[1])))
        bpy.ops.wm.addon_enable(module = importer_op[2])
        mod = importer_op[0]
        for name in importer_op[1] :
             mod = getattr(mod, name)
        #end for
        importer_op = mod
    #end if
    for infile in importable :
        importer_op(filepath = infile, **importer_args)
    #end for
    if scale_factor != None :
        bpy.ops.transform.resize(value = (scale_factor, scale_factor, scale_factor))
    #end if
    for image in bpy.data.images :
        try :
            image.pack()
        except RuntimeError as fail :
            sys.stderr.write("%s\n" % str(fail))
        #end try
    #end for
    if postexec != "" :
        exec(postexec)
    #end if
    bpy.ops.wm.save_as_mainfile(filepath = outfile)
#end if

if tmpdir != None :
    shutil.rmtree(tmpdir)
#end if

if just_test :
    sys.exit(is_importable_status)
#end if

EOD
)
